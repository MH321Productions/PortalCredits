#!/usr/bin/python3

import sys
import os
from pathlib import Path

def hexdumpSong(filepath: str, logPrefix: str = ""):
    size = os.path.getsize(filepath)

    print(f"{logPrefix} The song file \"{os.path.basename(filepath)}\" is {size} ({hex(size)}) bytes big")

    print(logPrefix, "Opening file Song.hpp")
    file = open("../Generated/Song.hpp", "w")
    read = open(filepath, 'rb')

    print(logPrefix, "Writing header")
    file.write("//This file was automatically generated by src/Script/GenerateResources.py\n\n")
    file.write("#ifndef PC_SONG_HPP\n#define PC_SONG_HPP\n\n") #Header guard
    file.write("#include <array>\n\n") #Include
    file.write("namespace PortalCredits {\n\n") # Namespace start
    file.write(f"    static const std::array<unsigned char, {hex(size)}> stillAlive = ")
    file.write("{\n") #Array start

    # Begin hexdump
    print(logPrefix, "Writing contents")
    toCopy = 16
    rest = size
    index = 0
    b = 0
    while toCopy > 0:
        file.write("        ")
        for i in range(toCopy):
            file.write(f"0x{read.read(1).hex()}, ")
        file.write("\n")
        index += toCopy
        rest -= toCopy
        if rest >= 16:
            toCopy = 16
        else:
            toCopy = rest

    read.close()

    print(logPrefix, "Writing footer")
    file.write("    };\n") #Array end
    file.write("}\n") #Namespace end
    file.write("#endif //PC_SONG_HPP") # Header guard end

    file.close()

def writeCredits(fileOut):
    fileOut.write("    static const std::vector<std::string> credits = {\n")

    fileIn = open("../../res/Credits.txt", 'r')

    for line in fileIn:
        temp = str(line).replace("\n", "").replace("\\", "\\\\")
        fileOut.write(f"        \"{temp}\",\n")
    
    fileOut.write("    };\n\n")
    fileIn.close()

def writeLyrics(fileOut):
    fileOut.write("    static const std::vector<std::vector<std::string>> lyrics = {\n")
    fileOut.write("        {\n")

    fileIn = open("../../res/Lyrics.txt", 'r')

    for line in fileIn:
        if line.startswith("#"):
            fileOut.write("        },\n\n")
            fileOut.write("        {\n")
        else:
            temp = str(line).replace("\n", "").replace("\\", "\\\\")
            fileOut.write(f"            \"{temp}\",\n")
    
    fileOut.write("        }\n")
    fileOut.write("    };\n\n")
    fileIn.close()

def generateLyricsHeader(logPrefix: str = ""):
    print(logPrefix, "Opening file Lyrics.hpp")

    file = open("../Generated/Lyrics.hpp", 'w+')

    #Write comment
    print(logPrefix, "Writing header")
    file.write("//This file was automatically generated by src/Script/GenerateResources.py\n\n")

    #Write Header guard
    file.write("#ifndef PC_LYRICS_HPP\n")
    file.write("#define PC_LYRICS_HPP\n\n")

    #Write include
    file.write("#include <vector>\n")
    file.write("#include <string>\n\n")

    #Write namespace
    file.write("namespace PortalCredits {\n\n")

    print(logPrefix, "Writing contents")

    #Write Lyrics
    writeLyrics(file)

    #Write Credits
    writeCredits(file)

    #Namespace end
    print(logPrefix, "Writing footer")
    file.write("}\n")

    #Header guard end
    file.write("#endif //PC_LYRICS_HPP")

    file.close()


# Main code
if len(sys.argv) < 2:
    print("Not enough arguments", file=sys.stderr)
    print("Usage: GenerateResources.py <Song file.ogg>", file=sys.stderr)
    exit(1)

dir = Path("../Generated")
if not dir.exists():
    print("Generating directory")
    dir.mkdir()

print("Generating Song")
hexdumpSong(sys.argv[1], "   ")

print()
print("Generating Lyrics")
generateLyricsHeader("   ")